"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print("BASE_DIR", BASE_DIR)
load_dotenv(os.path.join(BASE_DIR, ".", ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "DEFAULT_SECRET_KEY")
print("SECRET_KEY", SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "TRUE").upper() == "TRUE"
print("DEBUG", DEBUG)

# 초대 링크 생성 등 api 요청 시 참조하는 teambl url
TEAMBL_URL = os.getenv("TEAMBL_URL", "https://teambl.net/")
print("TEAMBL_URL", TEAMBL_URL)

ALLOWED_HOSTS = ["*"]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # 페이지 네이션 설정
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

AUTH_USER_MODEL = "api.CustomUser"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api",
    "rest_framework",
    "corsheaders",
    "channels",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

USE_DEV_DB = os.getenv("USE_DEV_DB", "TRUE").upper() == "TRUE"
print("USE_DEV_DB", USE_DEV_DB)
# DATABASES 설정
if USE_DEV_DB:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": os.getenv("DB_ENGINE"),
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT", "3306"),
            "OPTIONS": {
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                "charset": "utf8mb4",
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # 웹 프론트엔드 (React 개발 서버)
    "http://192.168.0.100:5173",  # 로컬 네트워크 React 프론트 (필요시 추가)
    "https://teambl.net",  # 배포된 React 웹 프론트
    "exp://192.168.0.100:19000",  # Expo 개발 서버
    "http://localhost:19006",  # Expo 웹 환경에서 실행할 경우
]

CORS_ALLOW_CREDENTIALS = True  # 인증 정보 포함 허용

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",  # Preflight 요청 허용
]

CORS_ALLOW_HEADERS = ["Authorization", "Content-Type", "X-CSRFToken"]


# 이메일 서버
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = "info@teambl.net"
EMAIL_HOST_PASSWORD = "neaf ykxc tvfd xfmc"

# Default File Storage
STORAGES = {
    "default": {  # ✅ 미디어 파일 (S3 사용)
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {},
    },
    "staticfiles": {  # ✅ staticfiles을 사용하지 않아도 기본값 설정 필요
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        "OPTIONS": {},
    },
}


# AWS S3 설정
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")  # AWS S3 버킷 이름
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")  # 서울 리전
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

# 미디어 파일 URL 설정
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"

# Increase the maximum allowed request size (in bytes)
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Increase the maximum allowed file upload size (in bytes)
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB


# 세션 엔진: 데이터베이스에 세션 저장
SESSION_ENGINE = "django.contrib.sessions.backends.db"

# 세션 만료 시간 (2시간)
SESSION_COOKIE_AGE = 7200  # 2 hour

# 브라우저가 닫힐 때 세션이 만료되지 않도록 설정
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# 세션이 수정된 경우에만 저장하도록 설정
SESSION_SAVE_EVERY_REQUEST = False

# 세션 쿠키에 HTTPOnly 속성 추가 (클라이언트 측 자바스크립트에서 접근하지 못하도록 함)
SESSION_COOKIE_HTTPONLY = True

# 보안 설정 (HTTPS에서만 세션 쿠키를 전송)
SESSION_COOKIE_SECURE = True  # HTTPS를 사용할 경우 True로 설정

######################
# 아래는 정기적으로 키워드 기반 게시물 추천 알림을 보내기 위한 설정입니다.
######################
from celery import Celery
from datetime import timedelta

CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_BEAT_SCHEDULE = {
    "send_recommendations": {
        "task": "app.tasks.send_recommendations",
        "schedule": timedelta(minutes=3),  # 원하는 실행 주기
    },
}

# 암호화 키
SECRET_KEY_FERNET = os.getenv("SECRET_KEY_FERNET", "default_salt_key")


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}
